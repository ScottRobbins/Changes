import ArgumentParser
import Files
import Foundation
import Version

struct ChangelogGenerator {
  private let dateFormatter = ISO8601DateFormatter()

  init() {
    dateFormatter.formatOptions = [.withFullDate, .withDashSeparatorInDate]
  }

  func regenerateFiles(identifiers: [String]) throws {
    let loadedConfig = try ConfigurationLoader().load()
    for identifier in identifiers {
      guard loadedConfig.config.files.map(\.identifier).contains(identifier) else {
        throw ChangesError(
          "\(identifier) is not a valid identifier for a file defined in the config."
        )
      }
    }

    let files = loadedConfig.config.files.filter { identifiers.contains($0.identifier) }
    try regenerateFiles(files, loadedConfig: loadedConfig)
  }

  func regenerateAutomaticallyRegeneratableFiles() throws {
    let loadedConfig = try ConfigurationLoader().load()

    let files = loadedConfig.config.files.filter(\.automaticallyRegenerate)
    try regenerateFiles(files, loadedConfig: loadedConfig)
  }

  private func regenerateFiles(
    _ files: [ChangesConfig.ChangelogFile],
    loadedConfig: LoadedChangesConfig
  ) throws {
    guard let workingFolder = try File(path: loadedConfig.path).parent else {
      throw ChangesError("Could not find folder of changes config.")
    }

    let entries = try ChangesFetcher().fetch()
    for file in files {
      try writeToChangelog(
        unreleasedEntries: entries.unreleasedEntries.sorted { $0.createdAtDate < $1.createdAtDate },
        releaseEntries: entries.releaseEntries.sorted { $0.version > $1.version },
        file: file,
        workingFolder: workingFolder
      )
    }
  }

  private func writeToChangelog(
    unreleasedEntries: [ChangelogEntry],
    releaseEntries: [ChangesFetcher.ReleaseEntry],
    file: ChangesConfig.ChangelogFile,
    workingFolder: Folder
  ) throws {
    let unreleasedContentString = sectionString(
      name: "Unreleased",
      entries: unreleasedEntries,
      file: file
    )

    let releaseContentString = releaseEntries.map { releaseEntry in
      let entries = releaseEntry.entries + releaseEntry.prereleases.flatMap(\.entries)
      return sectionString(
        name: releaseEntry.version.description,
        date: releaseEntry.createdAtDate,
        entries: entries,
        file: file
      )
    }.joined(separator: "\n\n\n")

    let footerString =
      file.footerText.flatMap {
        """
        ---
        \($0)
        """
      } ?? ""

    let contentString = [
      unreleasedContentString,
      releaseContentString.isEmpty ? nil : releaseContentString,
      footerString.isEmpty ? nil : footerString,
    ]
    .compactMap { $0 }
    .joined(separator: "\n\n\n")

    let changelogString =
      """
      # Changelog
      All notable changes to this project will be documented in this file.
      This file is auto-generated by Changes. Any modifications made to it will be overwritten.


      \(contentString)
      """.trimmingCharacters(in: .whitespacesAndNewlines) + "\n"

    try workingFolder.createFileIfNeeded(at: file.path).write(changelogString)
  }

  private func sectionString(
    name: String,
    date: Date? = nil,
    entries: [ChangelogEntry],
    file: ChangesConfig.ChangelogFile
  ) -> String {
    let sectionNameString: String
    if let date = date {
      let dateString = dateFormatter.string(from: date)
      sectionNameString = "## [\(name)] - \(dateString)"
    }
    else {
      sectionNameString = "## [\(name)]"
    }
    if entries.isEmpty {
      return sectionNameString
    }

    let validEntries = entries.filter { !Set(file.tags).intersection($0.tags).isEmpty }
    let usedTags = validEntries.flatMap(\.tags).uniqueValues().sorted {
      if let index1 = file.tags.firstIndex(of: $0),
        let index2 = file.tags.firstIndex(of: $1)
      {
        return index1 < index2
      }
      else {
        return false
      }
    }

    let tagsString: String = usedTags.map { usedTag in
      let entriesString =
        validEntries
        .filter { $0.tags.contains(usedTag) }
        .map {
          "- \($0.description)"
        }.joined(separator: "\n")

      return """
        ### \(usedTag)
        \(entriesString)
        """
    }.joined(separator: "\n\n")

    return """
      \(sectionNameString)
      \(tagsString)
      """
  }
}
